INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (1, 'blacklist', 'Blacklist filter', '{"name":"blacklist","dsl":"metafacture","reference":"blacklist","description":"Blacklist filter","parameters":{"entry":{"repeat":true,"type":"repeat","parameters":{"name":{"type":"text"},"value":{"type":"text","optional":true}}}}}', 'Function', '["entry"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (2, 'case', 'Upper/lower-case transformation.', '{"name":"case","dsl":"metafacture","reference":"case","description":"Upper/lower-case transformation.","parameters":{"to":{"type":"radio","choices":["upper","lower"]},"language":{"type":"text","optional":true}}}', 'Function', '["to","language"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (3, 'compose', 'Add pre- or postfix to a string.', '{"name":"compose","dsl":"metafacture","reference":"compose","description":"Add pre- or postfix to a string.","parameters":{"prefix":{"type":"text","optional":true},"postfix":{"type":"text","optional":true}}}', 'Function', '["prefix","postfix"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (4, 'constant', 'Sets literal value to a constant.', '{"name":"constant","dsl":"metafacture","reference":"constant","description":"Sets literal value to a constant.","parameters":{"value":{"type":"text"}}}', 'Function', '["value"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (5, 'count', 'Returns the an increasing count for each received literal.', '{"name":"count","dsl":"metafacture","reference":"count","description":"Returns the an increasing count for each received literal."}', 'Function', null);
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (6, 'equals', 'Returns the value only if equality holds.', '{"name":"equals","dsl":"metafacture","reference":"equals","description":"Returns the value only if equality holds.","parameters":{"string":{"type":"text"}}}', 'Function', '["string"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (7, 'htmlanchor', 'Create an HTML anchor.', '{"name":"htmlanchor","dsl":"metafacture","reference":"htmlanchor","description":"Create an HTML anchor.","parameters":{"prefix":{"type":"text"},"postfix":{"type":"text","optional":true},"title":{"type":"text","optional":true}}}', 'Function', '["prefix","postfix","title"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (8, 'isbn', 'ISBN conversion and verification.', '{"name":"isbn","dsl":"metafacture","reference":"isbn","description":"ISBN conversion and verification.","parameters":{"to":{"type":"radio","choices":["isbn13","isbn10","clean"]},"verifyCheckDigit":{"type":"checkbox","optional":true}}}', 'Function', '["to","verifyCheckDigit"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (9, 'lookup', 'Performs a table lookup', '{"name":"lookup","dsl":"metafacture","reference":"lookup","description":"Performs a table lookup","parameters":{"in":{"type":"text","optional":true,"description":"Unique name of the lookup table"},"default":{"type":"text","optional":true,"description":"Value used if no corresponding key is found."},"entry":{"repeat":true,"type":"repeat","parameters":{"name":{"type":"text"},"value":{"type":"text","optional":true}}}}}', 'Function', '["in","default","entry"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (10, 'normalize-utf8', null, '{"name":"normalize-utf8","dsl":"metafacture","reference":"normalize-utf8"}', 'Function', null);
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (11, 'not-equals', 'Returns value only if equality does not hold.', '{"name":"not-equals","dsl":"metafacture","reference":"not-equals","description":"Returns value only if equality does not hold.","parameters":{"string":{"type":"text"}}}', 'Function', '["string"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (12, 'occurrence', 'Filter by number of occurrence.', '{"name":"occurrence","dsl":"metafacture","reference":"occurrence","description":"Filter by number of occurrence.","parameters":{"only":{"type":"text","pattern":"(lessThen |moreThen )?\\d+"},"sameEntity":{"type":"checkbox","optional":true}}}', 'Function', '["only","sameEntity"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (13, 'regexp', 'Extract data based on a regular expression. Syntax corresponds to Java Regular Expressions.', '{"name":"regexp","dsl":"metafacture","reference":"regexp","description":"Extract data based on a regular expression. Syntax corresponds to Java Regular Expressions.","parameters":{"match":{"type":"text"},"format":{"type":"text","optional":true}}}', 'Function', '["match","format"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (14, 'replace', 'String replace based on a regular expression. Pattern syntax corresponds to Java Regular Expressions.', '{"name":"replace","dsl":"metafacture","reference":"replace","description":"String replace based on a regular expression. Pattern syntax corresponds to Java Regular Expressions.","parameters":{"pattern":{"type":"regexp"},"with":{"type":"text","description":"The replacement"}}}', 'Function', '["pattern","with"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (15, 'setreplace', 'Relace strings based on a replacement table.', '{"name":"setreplace","dsl":"metafacture","reference":"setreplace","description":"Relace strings based on a replacement table.","parameters":{"map":{"type":"text","optional":true,"description":"Unique name of the replacement table."},"entry":{"repeat":true,"type":"repeat","parameters":{"name":{"type":"text"},"value":{"type":"text","optional":true}}}}}', 'Function', '["map","entry"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (16, 'split', 'Split string based on a regular expression. Pattern syntax corresponds to Java Regular Expressions.', '{"name":"split","dsl":"metafacture","reference":"split","description":"Split string based on a regular expression. Pattern syntax corresponds to Java Regular Expressions.","parameters":{"delimiter":{"type":"text","description":"Regular expression, defining the split"}}}', 'Function', '["delimiter"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (17, 'substring', 'Returns a substring', '{"name":"substring","dsl":"metafacture","reference":"substring","description":"Returns a substring","parameters":{"start":{"type":"number","optional":true},"end":{"type":"number","optional":true}}}', 'Function', '["start","end"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (18, 'switch-name-value', 'Switches name and value.', '{"name":"switch-name-value","dsl":"metafacture","reference":"switch-name-value","description":"Switches name and value."}', 'Function', null);
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (19, 'trim', 'Trimms the value', '{"name":"trim","dsl":"metafacture","reference":"trim","description":"Trimms the value"}', 'Function', null);
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (20, 'unique', 'Filters out dublicate literals', '{"name":"unique","dsl":"metafacture","reference":"unique","description":"Filters out dublicate literals","parameters":{"in":{"type":"select","choices":["record","entity"],"optional":true,"description":"Scope of ''sameness'' (experimental)"},"part":{"type":"select","choices":["value","name","name-value"],"optional":true,"description":"Part of the literal is tested for equality"}}}', 'Function', '["in","part"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (21, 'urlencode', 'Escapes value according to URL encoding rules.', '{"name":"urlencode","dsl":"metafacture","reference":"urlencode","description":"Escapes value according to URL encoding rules."}', 'Function', null);
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (22, 'whitelist', 'Whitelist filter.', '{"name":"whitelist","dsl":"metafacture","reference":"whitelist","description":"Whitelist filter.","parameters":{"map":{"type":"text","optional":true,"description":"Unique name of the replacement table."},"entry":{"repeat":true,"type":"repeat","parameters":{"name":{"type":"text"},"value":{"type":"text","optional":true}}}}}', 'Function', '["map","entry"]');
INSERT INTO FUNCTION (ID, NAME, DESCRIPTION, FUNCTION_DESCRIPTION, FUNCTION_TYPE, PARAMETERS) VALUES (23, 'concat', 'Collects all received values and concatenates them on record end.', '{"name":"concat","dsl":"metafacture","reference":"concat","description":"Collects all received values and concatenates them on record end.","parameters":{"delimiter":{"type":"text"},"prefix":{"type":"text","optional":true},"postfix":{"type":"text","optional":true}}}', 'Function', '["delimiter","prefix","postfix"]');
